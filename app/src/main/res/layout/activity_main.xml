<?xml version="1.0" encoding="utf-8"?>
<!--
    LinearLayout je jedan od osnovnih layout elemenata koji sluzi kada zelimo da sva deca koja se
    nalaze u okviru tog layout-a budu u jednoj koloni.

    LinearLayout-u moze da se pridruzi atribut orientation koji odredjuje orijentaciju elemenata koji
    se nalaze u okviru layouta. Ta orijentacija moze biti horizontalna ili vertikalna. U ovom slucaju,
    posto imamo 3 elementa u okviru layout-a koje zelimo da stoje jedan iznad drugog, orijentaciju
    postavljamo na vertical.

    Na svaki element unutar ovog taga postavljamo weight, koji oznacava prioritet svakog elementa
    u odredjivanju visine koju ce uzeti element. RelativeLayout i TableLayout imaju isti weight, 1,
    sto znaci da ce ravnomerno zauzeti prostor koji se nalazi izmedju toolbar-a i dna ekrana. Toolbar
    ima tacno specificiarnu visinu.
-->

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/activity_main"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context="rs.fon.kalkulator.MainActivity"
    android:orientation="vertical"
    android:background="@android:color/white"
    android:elevation="4dp">

    <!--
        include tag koristimo kada zelimo da dodamo element koji se nalazi u nekom drugom layout
        fajlu. Slican je kao include u php programskom jeziku. U ovom slucaju, mi dodajemo
        glavni toolbar na ovaj nacin, jer zelimo custom toolbar, a ne onaj koji je dolazi uz
        standardnu temu aplikacije.
    -->

    <include layout="@layout/toolbar" />

    <!--
        RelativeLayout koristimo kada zelimo decu unutar tog elementa da postavimo prema drugim elemntima
        ili prema samom layout-u. Kao sto vidimo, imamo dva textview elementa koji treba da stoje jedan iznad drugog,
        s tim da oba zajedno treba da stoje na dnu ovog dela ekrana. To se postize dodavanjem atributa
        layout_alignParentBottom i layout_above atributa na textview.
    -->

    <RelativeLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_weight="1"
        android:background="@color/text_background">

        <TextView
            android:id="@+id/bottom_display"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="TextView"
            android:textColor="@android:color/white"
            android:textAlignment="gravity"
            android:paddingBottom="20dip"
            android:paddingEnd="4dip"
            android:paddingStart="4dip"
            android:textSize="24sp"
            android:layout_alignParentStart="false"
            android:layout_alignParentBottom="true"
            android:layout_alignParentEnd="true"/>

        <TextView
            android:id="@+id/top_display"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textColor="@android:color/white"
            android:text="TextView"
            android:textAlignment="gravity"
            android:paddingBottom="20dip"
            android:paddingEnd="4dip"
            android:paddingStart="4dip"
            android:textSize="52sp"
            android:layout_above="@+id/bottom_display"
            android:layout_alignParentEnd="true"
            android:layout_marginBottom="25dp" />

    </RelativeLayout>

    <!--
        TableLayout sluzi kada zelimo da neki deo ekrana prikazemo kao tabelu. StretchColumns atribut
        sluzi kada zelimo da oznacimo koja kolona ce da se rasiri ukoliko ostane praznog prostora na ekranu.

        TableLayout ima decu elemente tipa TableRow koji oznacavaju redove u tabeli. U ovom slucaju, tabela
        ima 4 reda.
    -->

    <TableLayout
        android:id="@+id/gridLayout"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:stretchColumns="3"
        android:layout_weight="1"
        android:elevation="0dp">

        <!--
            Svakom TableRow elementu dodeljujemo jednaki layout_weight, kako bismo ih jednako rasirili
            po ekranu.

            Unutar svakog reda nalaze se Button elementi, koji oznacavaju dugme. Svakom Button elementu
            pridruzujemo onClick event koji oznacava metodu Unutar MainActivity klase koja ce se pozvati
            kada korisnik pritisne dugme.

            Svakom Button elementu dodeljujemo style atribut, koji oznacava set atributa koje svaki
            element ima (slicno class atributu u css). Svi stilovi se nalaze u res/values/styles.xml fajlu.
        -->

        <TableRow android:layout_weight="1">
            <Button
                android:id="@+id/numPlus"
                style="@style/NumButtonStyle"
                android:text="@string/num_plus"
                android:onClick="onAddClicked"
                android:layout_weight="1" />

            <Button
                android:id="@+id/numMinus"
                style="@style/NumButtonStyle"
                android:text="@string/num_minus"
                android:onClick="onSubtractClicked"
                android:layout_weight="1" />
        </TableRow>

        <TableRow android:layout_weight="1">
            <Button
                android:id="@+id/num1"
                style="@style/NumButtonStyle"
                android:text="@string/num_1"
                android:onClick="onNumberClicked"
                android:textColor="@android:color/black" />

            <Button
                android:id="@+id/num2"
                style="@style/NumButtonStyle"
                android:text="@string/num_2"
                android:onClick="onNumberClicked" />

            <Button
                android:id="@+id/num3"
                style="@style/NumButtonStyle"
                android:text="@string/num_3"
                android:onClick="onNumberClicked" />

            <Button
                android:id="@+id/numCE"
                style="@style/NumButtonStyle"
                android:text="@string/num_ce"
                android:onClick="onCEClicked" />
        </TableRow>

        <TableRow android:layout_weight="1">
            <Button
                android:id="@+id/num4"
                style="@style/NumButtonStyle"
                android:text="@string/num_4"
                android:onClick="onNumberClicked" />

            <Button
                android:id="@+id/num5"
                style="@style/NumButtonStyle"
                android:text="@string/num_5"
                android:onClick="onNumberClicked" />

            <Button
                android:id="@+id/num6"
                style="@style/NumButtonStyle"
                android:text="@string/num_6"
                android:onClick="onNumberClicked" />

            <Button
                android:id="@+id/numEquals"
                style="@style/NumButtonStyle"
                android:text="@string/num_equals"
                android:onClick="onEqualsClicked" />
        </TableRow>

        <TableRow android:layout_weight="1">
            <Button
                android:id="@+id/num7"
                style="@style/NumButtonStyle"
                android:text="@string/num_7"
                android:onClick="onNumberClicked" />

            <Button
                android:id="@+id/num8"
                style="@style/NumButtonStyle"
                android:text="@string/num_8"
                android:onClick="onNumberClicked" />

            <Button
                android:id="@+id/num9"
                style="@style/NumButtonStyle"
                android:text="@string/num_9"
                android:onClick="onNumberClicked" />

            <Button
                android:id="@+id/num0"
                style="@style/NumButtonStyle"
                android:text="@string/num_0"
                android:onClick="onNumberClicked" />
        </TableRow>
    </TableLayout>
</LinearLayout>
